// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  email           String          @unique
  password        String?
  fullName        String?
  dateOfBirth     String?
  phoneNumber     String?
  profileImage    String?
  gender          String?
  otp             Int?
  otpExpiresAt    DateTime?
  googleId        String? 
  facebookId      String? 
  appleId         String?
  role            UserRoleEnum   @default(CUSTOMER)
  status          UserStatus     @default(ACTIVE)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  customer        Customer[]
  garageOwner     GarageOwner[]
  driver          Driver[]
  admin           Admin[]
  garage          Garages[]


  @@map("users")
}

model Admin {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  userId          String         @db.ObjectId
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id])
  @@map("admins")
}

model Customer{
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  userId       String         @db.ObjectId @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  customerId   String?
  location     String?
  latitude     Float?
  longitude    Float?
  user         User           @relation(fields: [userId], references: [id])
  bookings     Bookings[]
  reviews      Review[]
  driver       Driver[]
  cars         Car[]
  @@map("customers")
}

model GarageOwner {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  userId          String         @db.ObjectId @unique
  description     String?
  location        String?
  latitude        Float?
  longitude       Float?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id])
  service         Service[]
  @@map("garage_owners")
}

model Garages {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  userId          String         @db.ObjectId
  garageName      String
  garageImage     String?
  description     String
  location        String
  latitude        Float?
  longitude       Float?
  minimumPrice    Float
  availableTimes  String[]
  serviceIds      String[]       @db.ObjectId
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id])
  bookings        Bookings[]
  service         Service[]
  reviews         Review[]
  @@map("garages")
}


model Service {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  serviceName     String
  servicePrice    Float
  serviceStatus   String?
  garageId        String         @db.ObjectId
  userId          String         @db.ObjectId
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  garage          Garages        @relation(fields: [garageId], references: [id])
  garageOwner     GarageOwner    @relation(fields: [userId], references: [userId])
  reviews         Review[]
  @@map("services")
}



model Bookings{
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  garageId        String         @db.ObjectId
  customerId      String         @db.ObjectId
  serviceIds      String[]       @db.ObjectId       
  totalAmount     Float
  bookingStatus   BookingStatus  @default(PENDING)
  carId           String         @db.ObjectId
  ownerNumber     String
  carName         String
  serviceDate     DateTime?
  location        String
  latitude        Float?
  longitude       Float?
  estimatedTime   String?
  serviceStatus   ServiceStatus  @default(IN_ROUTE)
  paymentStatus   PaymentStatus  @default(PENDING)
  paymentId       String?         @db.ObjectId
  bookingTime     String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  garage          Garages        @relation(fields: [garageId], references: [id])
  customer        Customer       @relation(fields: [customerId], references: [id])
  
  @@map("bookings")
}


model Driver {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  userId          String         @db.ObjectId @unique
  customerId      String         @db.ObjectId 
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id])
  customer        Customer       @relation(fields: [customerId], references: [userId])
  cars            Car[]
  @@map("drivers")
}

model Car {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  userId          String         @db.ObjectId
  carName         String
  carNumber       String?
  carModel        String?
  carImage        String?
  driverId        String         @db.ObjectId 
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  driver          Driver         @relation(fields: [driverId], references: [userId])
  customer        Customer       @relation(fields: [userId], references: [userId])
  @@map("cars")
}

model Review {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  serviceId       String?        @db.ObjectId
  garageId        String         @db.ObjectId
  customerId      String         @db.ObjectId
  rating          Int
  comment         String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  service         Service?        @relation(fields: [serviceId], references: [id])
  customer        Customer       @relation(fields: [customerId], references: [userId])
  garage          Garages        @relation(fields: [garageId], references: [id])
 
  @@map("reviews")
}

model Payment {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  paymentId       String
  paymentAmount   Float
  paymentDate     DateTime       @default(now())
  customerId      String        
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  

  @@map("payments")
}



enum UserRoleEnum {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
  GARAGE_OWNER
  DRIVER

}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}

enum ServiceStatus {
  IN_ROUTE
  IN_GARAGE
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
}